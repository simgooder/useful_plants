"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}function trimWrappers(e){return e.replace(/\[\[/g,"").replace(/\]\]/g,"").replace(/\{\{/g,"").replace(/\}\}/g,"").trim()}function trimOr(e){var t=e.indexOf("|");return-1!==t?e.substring(0,t):e}function getValue(e,t){if(!e)return null;var r=e.trim().replace(/File:/,"").replace(/\{\{\d+\}\}/g,"").replace(extraPropertyPattern,"").replace(endingPattern,"");if("y"===r||"yes"===r)return!0;if("birthPlace"==t)return e.trim();var a=r.match(linksPattern);return a?a[0].split(linkSeparatorPattern).filter(function(e){return e}):trimOr(trimWrappers(r))}function dataType(e){var t=e.globalPattern,r=e.parsePattern,a=e.parse,n=e.variable,l=e.name;return function(e){var i=e.match(t);if(!i){var s;return s={},defineProperty(s,l,[]),defineProperty(s,"sourceAfter",e),s}var o=i.map(function(e){return a(e.match(r))}),u=i.reduce(function(e,t,r){return e.replace(t,"$"+n+"_"+r)},e);return{data:defineProperty({},l,o),sourceAfter:u}}}function byDataHandler(e,t){var r=e.source,a=e.context,n=t(r),l=n.data,i=n.sourceAfter;return{context:Object.assign({},a,l),source:i}}function extractData(e){return dataTypes$1.map(function(e){return e.handler}).reduce(byDataHandler,{context:{},source:e})}function findPropertyList(e){var t=e.match(keyValueGlobalPattern);return t?t.map(function(e){var t=keyValuePattern.exec(e);if(!t)return null;var r=slicedToArray(t,3),a=r[1],n=r[2],l=camelCase(a.trim());return{key:l,value:getValue(n,l)}}).filter(function(e){return e}):[]}function fillVariables(e,t,r){var a=r.simplifyDataValues;if("string"!=typeof e)return console.log("Warning: Something went wrong. Could not fill variables in: ("+(void 0===e?"undefined":_typeof(e))+") "+JSON.stringify(e)),{};var n=dataTypes$1.find(function(t){return e.match(t.pattern)});if(n){var l=n.pattern.exec(e),i=slicedToArray(l,2),s=i[0],o=i[1],u=t[n.name][parseInt(o,10)];return a||"string"!=typeof u?u:e.replace(s,u)}return e}function fillVariablesUntilDone(e,t,r){if(void 0===e)return e;if(e instanceof Date)return e;if("number"==typeof e)return e;if(Array.isArray(e))return e.map(function(e){return fillVariablesUntilDone(e,t,r)});if("object"===(void 0===e?"undefined":_typeof(e)))return Object.keys(e).reduce(function(a,n){return Object.assign(a,defineProperty({},n,fillVariablesUntilDone(e[n],t,r)))},{});var a=fillVariables(e,t,r);return a===e?e:fillVariablesUntilDone(a,t,r)}function handleSmallData(e,t,r){var a=r.simplifyDataValues;if("string"==typeof e&&e.match(smallDataType.pattern)){var n=e.replace(smallDataType.pattern,"").replace(/,/,"").trim(),l=smallDataType.pattern.exec(e),i=slicedToArray(l,2),s=i[1],o=t[smallDataType.name][parseInt(s,10)],u={primary:getVariableValue(n,t,{simplifyDataValues:a}),secondary:getVariableValue(o,t,{simplifyDataValues:a})};return a?u.primary:u}return null}function getVariableValue(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=r.simplifyDataValues,n=void 0===a||a,l=handleSmallData(e,t,{simplifyDataValues:n});return l||fillVariablesUntilDone(e,t,{simplifyDataValues:n})}function reduceVariable(e,t,r,a){if(null===t)return null;if("boolean"==typeof t)return t;if(Array.isArray(t))return t.map(function(e){return getVariableValue(e,r,a)});if(e.match(/areaTotal/)||e.match(/population/)){var n=numberParse(t);if(!1===n&&(n=parseFloat(t,10)),!isNaN(n))return n}if(e.match(/date/i)){var l=+new Date(t);if(!isNaN(l))return new Date(t)}var i=getVariableValue(t,r,a);return Array.isArray(i)?i.map(function(e){return getVariableValue(e,r,a)}):i}function byVariableReduction(e,t){return function(r,a){var n=a.key,l=a.value,i=reduceVariable(n,l,e,t);return""===i||null===i?r:Object.assign({},r,defineProperty({},n,i))}}function extractProperties(e,t){var r=e.source,a=e.context;return findPropertyList(r).reduce(byVariableReduction(a,t),{})}function transformProperties(e){return Object.keys(e).reduce(function(t,r){var a=e[r],n=r.match(blankNamePattern);if(n){var l=n[1]||"",i=e["blank"+l+"NameSec2"],s=e["blank"+l+"InfoSec2"];return"string"!=typeof i?t:Object.assign(t,defineProperty({},camelCase(i),s))}return r.match(blankInfoPattern)?t:Object.assign(t,defineProperty({},r,a))},{})}function findOuterIndex(e){for(var t=[],r=0;r<e.length-1;r++){var a=e.substr(r,2);if("{{"!==a){if("}}"===a){t.pop();if(0===t.length)return r+2;r++}}else t.push(r),r++}}function parse(e){var t=e.match(infoBoxStartPattern);if(!t)return{data:e,sourceLeft:null};var r=t.index,a=e.substring(r),n=findOuterIndex(a);if(!n)return{data:e,sourceLeft:null};var l=a.substring(0,n),i=e.substring(n);return{data:l,sourceLeft:!i.match(infoBoxStartPattern)?null:i}}function extractInfoboxes(e){for(var t=parse(e),r=[t.data];t.sourceLeft;)t=parse(t.sourceLeft),r.push(t.data);return r}function cleanSource(e){return e.replace(/''/g,"").replace(/\|display=inline/g,"").replace(/<br\s?\/?>/g,",").replace(/<ref(\s\w+=[^>]+)?>.*<\/ref>/g,"").replace(/&minus;/g,"-").replace(/<sup>/g,"^").replace(/\{\{sfn\|([^\}\}]+)\}\}/g,"").replace(/âˆ’/g,"-").replace(/<\/sup>/g,"").replace(/<ref(\s\w+=[^>]+)?\s?\/>/g,"").replace(/<!--([\s\S]*?)-->/g,"").replace(/&nbsp;/g," ").replace("|''See list''","")}function transformRowSpan(e){return e.map(transformCells).reduce(function(e,t,r){for(var a=0===r?0:1,n=0;n<t.length;n++)e[n+a]||(e[n+a]={}),t[n]&&(e[n+a][t[n]]=1);return e},[]).map(function(e){return Object.keys(e).join(",")}).join(" || ")}function getMatches(e,t){for(var r=void 0,a=[];null!==(r=t.exec(e));)a.push({value:r[1]&&r[1].trim(),start:r.index,end:r.index+r[0].length});return a}function parseTableData(e){var t=e.match(rowPattern$1);return t?t.map(function(e){var t=e.match(rowPatternSingle);return slicedToArray(t,2)[1].trim().split("|").slice(1)}):[]}function getTables(e){var t=getMatches(e,tableStartPattern$1),r=getMatches(e,tableEndPattern$1);return t.map(function(t,a){var n=r[a];if(!n)throw new Error("[Table Parsing] Failed to pair table");return{rows:parseTableData(e.substring(t.end,n.start).trim().replace(/'''/g,"")),start:t.start,end:n.end}})}function last(e){return e.length?e[e.length-1]:void 0}var camelCase=_interopDefault(require("camelcase")),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},defineProperty=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e},slicedToArray=function(){function e(e,t){var r=[],a=!0,n=!1,l=void 0;try{for(var i,s=e[Symbol.iterator]();!(a=(i=s.next()).done)&&(r.push(i.value),!t||r.length!==t);a=!0);}catch(e){n=!0,l=e}finally{try{!a&&s.return&&s.return()}finally{if(n)throw l}}return r}return function(t,r){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),toConsumableArray=function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)},smallGlobalPattern=/\{\{small\|([^\}\}]+)\}\}/g,smallPattern=/small\|([^\}\}]+)\}\}/,small={globalPattern:smallGlobalPattern,parsePattern:smallPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"SMALL",name:"smalls"},flagGlobalPattern=/\{\{flag\|([^\}\}]+)\}\}/g,flagPattern=/flag\|([^\}\}]+)\}\}/,flag={globalPattern:flagGlobalPattern,parsePattern:flagPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"FLAG",name:"flags"},coordsGlobalPattern=/\{\{coord\|([^\}\}]+)\}\}/g,coordsPattern=/coord\|([^\}\}]+)\}\}/,coords={globalPattern:coordsGlobalPattern,parsePattern:coordsPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"COORD",name:"coords"},globalPattern=/\[\[([^\]\|]+)\|?([^\]]+)?\]\]/g,pattern=/\[\[([^\]\|]+)\|?([^\]]+)?\]\]/,instances={globalPattern:globalPattern,parsePattern:pattern,parse:function(e){var t=slicedToArray(e,3),r=t[1],a=t[2];return r||a},variable:"INSTANCE",name:"instances"},extraPropertyPattern=/\n?\s?\|\s?\w+$/,endingPattern=/\n\}\}$/,linksPattern=/((\$\w+_\d+)\s*,?\s*){2,}/g,linkSeparatorPattern=/[,\s?]/g,listItemPrefixPattern=/^\|\s?/,unbulletedListGlobalPattern=/\{\{(?:unbulleted list|ubl|ubt|ublist|unbullet)\s?\|([^\}\}]+)\}\}/g,unbulletedListItemPattern=/\|\s*([^|}]+)/g,unbulletedLists={globalPattern:unbulletedListGlobalPattern,parsePattern:unbulletedListItemPattern,parse:function(e){return e?e.map(function(e){return e.replace(listItemPrefixPattern,"").trim()}).filter(function(e){return e&&e.length}):[]},variable:"UNBULLETED_LIST",name:"unbulletedLists"},listItemPrefixPattern$1=/^\*\s*/,plainListGlobalPattern=/\n(\*\s*[^*|]+)+/g,plainListItemPattern=/\*\s*([^*|]+)/g,unmarkedLists={globalPattern:plainListGlobalPattern,parsePattern:plainListItemPattern,parse:function(e){return e?e.map(function(e){return e.replace(listItemPrefixPattern$1,"").trim()}).filter(function(e){return e&&e.length}):[]},variable:"UNMARKED_LIST",name:"unmarkedLists"},listItemPrefixPattern$2=/^\*\s?/,plainListGlobalPattern$1=/\{\{f?p?P?l?a?i?n?t?list\s?\|([^\}\}]+)\}\}/g,plainListItemPattern$1=/\*\s*([^*}]+)/g,plainLists={globalPattern:plainListGlobalPattern$1,parsePattern:plainListItemPattern$1,parse:function(e){return e?e.map(function(e){return e.replace(listItemPrefixPattern$2,"").trim()}).filter(function(e){return e&&e.length}):[]},variable:"PLAIN_LIST",name:"plainLists"},marriageGlobalPattern=/\{\{Marriage\|([^\}\}]+)\}\}/g,marriagePattern=/Marriage\|([^|]+)\|(.*)\}\}/,marriages={globalPattern:marriageGlobalPattern,parsePattern:marriagePattern,parse:function(e){var t=slicedToArray(e,3);return{who:t[1],married:t[2]}},variable:"MARRIAGE",name:"marriages"},otherGlobalPattern=/\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/g,otherPattern=/\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/,other={globalPattern:otherGlobalPattern,parsePattern:otherPattern,parse:function(e){var t=slicedToArray(e,4),r=t[1];t[2],t[3];return r},variable:"OTHER",name:"others"},birthDateGlobalPattern=/\{\{birth\sdate([^\}\}]+)\}\}/gi,birthDatePattern=/(\d+)\|(\d+)\|(\d+)/,millisInYear=31536e6,birthDates={globalPattern:birthDateGlobalPattern,parsePattern:birthDatePattern,parse:function(e){var t=slicedToArray(e,4),r=t[1],a=t[2],n=t[3],l=new Date(r,a-1,n);return{date:l,age:Math.floor((Date.now()-+l)/millisInYear)}},variable:"BIRTH_DATE",name:"birthDates"},deathDateGlobalPattern=/\{\{death\sdate\sand\sage([^\}\}]+)\}\}/gi,deathDatePattern=/(\d+)\|(\d+)\|(\d+)\|(\d+)\|?(\d+)?\|?(\d+)?/,millisInYear$1=31536e6,deathDates={globalPattern:deathDateGlobalPattern,parsePattern:deathDatePattern,parse:function(e){var t=slicedToArray(e,7),r=t[1],a=t[2],n=t[3],l=t[4],i=t[5],s=void 0===i?0:i,o=t[6],u=void 0===o?0:o,c=new Date(r,a-1,n),f=new Date(l,s-1,u);return{date:c,age:Math.floor((Number(c)-Number(f))/millisInYear$1)}},variable:"DEATH_DATE",name:"deathDates"},URLGlobalPattern=/\{\{URL\|([^\}\}]+)\}\}/g,URLPattern=/URL\|([^\}\}]+)\}\}/,url={globalPattern:URLGlobalPattern,parsePattern:URLPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"URL",name:"urls"},websiteGlobalPattern=/\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)\s+([\w\s]+)\]/g,websitePattern=/\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)\s+([\w\s]+)\]/,website={globalPattern:websiteGlobalPattern,parsePattern:websitePattern,parse:function(e){var t=slicedToArray(e,5),r=t[1],a=t[2],n=t[3];return{protocol:r,hostname:a,path:n,title:t[4],url:r+"://"+a+n}},variable:"WEBSITE",name:"websites"},convertGlobalPattern=/\{\{convert\|([\d\.]+)\|(\w+)/g,convertPattern=/\{\{convert\|([\d\.]+)\|(\w+)/,convert={globalPattern:convertGlobalPattern,parsePattern:convertPattern,parse:function(e){var t=slicedToArray(e,3);return t[1]+" "+t[2]},variable:"CONVERT",name:"converts"},dataTypes=[instances,small,flag,coords,marriages,birthDates,deathDates,unbulletedLists,website,url,convert,other,plainLists,unmarkedLists],dataTypes$1=dataTypes.map(function(e){return{handler:dataType(e),name:e.name,pattern:new RegExp("\\$"+e.variable+"_(\\d+)")}}),keyValueGlobalPattern=/\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/g,keyValuePattern=/\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/,numberParse=function(e){return"string"==typeof e&&(e=e.trim().replace(/ /g,""),e.match(/,/)&&e.match(/\./)?e.indexOf(",")<e.indexOf(".")?parseEnglish(e):parseSpanish(e):e.match(/,/)&&!e.match(/\./)?e.match(/,/g).length>1?parseEnglish(e):e.match(/,[0-9]{3}($|^[0-9])/)?parseEnglish(e):parseSpanish(e):!e.match(/,/)&&e.match(/\./)?e.match(/\./g).length>1?parseSpanish(e):e.match(/\.[0-9]{3}($|^[0-9])/)?parseSpanish(e):parseEnglish(e):(+e).toString()===e&&+e)},parseEnglish=function(e){return+e.replace(/,/g,"")},parseSpanish=function(e){return+e.replace(/\./g,"").replace(/,/g,".")},smallDataType=dataTypes$1.find(function(e){return"smalls"===e.name}),blankNamePattern=/blank(\d+)?NameSec2/,blankInfoPattern=/blank(\d+)?InfoSec2/,infoBoxStartPattern=/{{\w*box/,tableStartPattern=/{\|(.*)\n?/,tableEndPattern=/\n\|}/,headersPattern=/!\s?(.*)/g,rowPattern=/\|-/,cellSeparatorPattern=/(?:\n\|)|(?:\|\|)/,linkPattern=/\[\[([^\]]+)\]\]/g,linkNamePattern=/^.*\|/,inlineHeaderPattern="!!",actionPattern=/{{anchor\|(.*)}}/g,ticks=/'''/g,rowSpanCountPattern=/rowspan="(\d+)"/,stripLinks=function(e){return e.replace(linkPattern,function(e,t){return t.replace(linkNamePattern,"").trim()||t})},removeActions=function(e){return e.replace(actionPattern,"")},transformCell=function(e){return stripLinks(removeActions(e||"")).replace(rowSpanCountPattern,"").replace(linkNamePattern,"").replace(ticks,"").trim()},transformCells=function(e){return e.split(cellSeparatorPattern).map(transformCell)},findIndex=function(e,t){var r=e.match(t);return r?r.index:-1},findTableStart=function(e){var t=e.match(tableStartPattern);return t?t.index+t[0].length:-1},findTableEnd=function(e){return findIndex(e,tableEndPattern)},getHeaders=function(e){for(var t=[],r=void 0;r=headersPattern.exec(e);)t.push.apply(t,toConsumableArray(r[1].split(inlineHeaderPattern).map(transformCell)));return t},getRows=function(e){var t=e.split(rowPattern).map(function(e){return e.replace(/^.*\n+?\|/,"").trim()}).filter(function(e){return e}),r=[],a=0,n=0,l=[],i=!0,s=!1,o=void 0;try{for(var u,c=t[Symbol.iterator]();!(i=(u=c.next()).done);i=!0){var f=u.value,p=f.match(rowSpanCountPattern);p&&(a=0,n=parseInt(p[1]),l=[]),a<n?(l.push(f),++a===n&&r.push(transformRowSpan(l))):r.push(f)}}catch(e){s=!0,o=e}finally{try{!i&&c.return&&c.return()}finally{if(s)throw o}}return r},getNextTable=function(e){var t=e,r=findTableStart(t);if(-1===r)return null;t=t.substring(r);var a=findTableEnd(t);if(-1===a)return null;t=t.substring(0,a);var n=getRows(t);if(!n.length)return null;var l=getHeaders(n[0]);return l.length?{data:n.slice(1).map(transformCells).map(function(e){return l.reduce(function(t,r,a){return t[camelCase(r)]=e[a],t},{})}),end:r+a}:null},parseTables=function(e){for(var t=[],r=e,a=null;a=getNextTable(r);){if(!a)return t;t.push(a.data),r=r.substring(a.end)}return t},headingPattern=/[^=]==\s?([\w\s]+)\s?==/g,subheadingPattern=/===([\w\s]+)===/g,tableStartPattern$1=/{{list.+start.*}}/gi,tableEndPattern$1=/{{list.+end.*}}/gi,rowPattern$1=/{{(.*)}}/g,rowPatternSingle=/{{(.*)}}/,parseLists=function(e){var t=getMatches(e,headingPattern),r=getMatches(e,subheadingPattern),a=getTables(e);return a.forEach(function(e){var a=t.filter(function(t){return t.end<e.start}).map(function(e){return e.value});e.heading=last(a);var n=r.filter(function(t){return t.end<e.start}).map(function(e){return e.value});e.subheading=last(n),delete e.start,delete e.end}),a},index=function(e,t){var r=extractInfoboxes(e).map(function(e){return transformProperties(extractProperties(extractData(cleanSource(e)),t))});if(!r.length)return{};var a={general:r.shift()};return r.forEach(function(e){var t=e.type;t?a[camelCase(t)]=e:Object.assign(a,{general:Object.assign({},a.general,e)})}),a.tables=parseTables(e),a.lists=parseLists(e),a};module.exports=index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vdXRpbC9nZXRWYWx1ZS5qcyIsIi4uL2RhdGEtdHlwZXMvZGF0YVR5cGUuanMiLCIuLi91dGlsL2V4dHJhY3REYXRhLmpzIiwiLi4vdXRpbC9wcm9wZXJ0eUxpc3QuanMiLCIuLi91dGlsL2V4dHJhY3RQcm9wZXJ0aWVzLmpzIiwiLi4vdXRpbC90cmFuc2Zvcm1Qcm9wZXJ0aWVzLmpzIiwiLi4vdXRpbC9leHRyYWN0SW5mb2JveGVzLmpzIiwiLi4vdXRpbC9jbGVhblNvdXJjZS5qcyIsIi4uL3V0aWwvcGFyc2VUYWJsZXMuanMiLCIuLi91dGlsL3BhcnNlTGlzdHMuanMiLCIuLi9kYXRhLXR5cGVzL3NtYWxsLmpzIiwiLi4vZGF0YS10eXBlcy9mbGFnLmpzIiwiLi4vZGF0YS10eXBlcy9jb29yZHMuanMiLCIuLi9kYXRhLXR5cGVzL2luc3RhbmNlcy5qcyIsIi4uL2RhdGEtdHlwZXMvdW5idWxsZXRlZExpc3RzLmpzIiwiLi4vZGF0YS10eXBlcy91bm1hcmtlZExpc3RzLmpzIiwiLi4vZGF0YS10eXBlcy9wbGFpbkxpc3RzLmpzIiwiLi4vZGF0YS10eXBlcy9tYXJyaWFnZXMuanMiLCIuLi9kYXRhLXR5cGVzL290aGVyLmpzIiwiLi4vZGF0YS10eXBlcy9iaXJ0aERhdGVzLmpzIiwiLi4vZGF0YS10eXBlcy9kZWF0aERhdGVzLmpzIiwiLi4vZGF0YS10eXBlcy91cmwuanMiLCIuLi9kYXRhLXR5cGVzL3dlYnNpdGUuanMiLCIuLi9kYXRhLXR5cGVzL2NvbnZlcnQuanMiLCIuLi9kYXRhLXR5cGVzL2luZGV4LmpzIiwiLi4vdXRpbC9udW1iZXJQYXJzZS5qcyIsIi4uL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4dHJhUHJvcGVydHlQYXR0ZXJuID0gL1xcbj9cXHM/XFx8XFxzP1xcdyskLztcbmNvbnN0IGVuZGluZ1BhdHRlcm4gPSAvXFxuXFx9XFx9JC87XG5jb25zdCBsaW5rc1BhdHRlcm4gPSAvKChcXCRcXHcrX1xcZCspXFxzKiw/XFxzKil7Mix9L2c7XG5jb25zdCBsaW5rU2VwYXJhdG9yUGF0dGVybiA9IC9bLFxccz9dL2c7XG5cbmZ1bmN0aW9uIHRyaW1XcmFwcGVycyhzdHIpIHtcbiAgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKC9cXFtcXFsvZywgJycpXG4gICAgLnJlcGxhY2UoL1xcXVxcXS9nLCAnJylcbiAgICAucmVwbGFjZSgvXFx7XFx7L2csICcnKVxuICAgIC5yZXBsYWNlKC9cXH1cXH0vZywgJycpXG4gICAgLnRyaW0oKTtcbn1cblxuZnVuY3Rpb24gdHJpbU9yKHN0cikge1xuICBjb25zdCBvclBvc2l0aW9uID0gc3RyLmluZGV4T2YoJ3wnKTtcbiAgaWYgKG9yUG9zaXRpb24gIT09IC0xKSB7XG4gICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoMCwgb3JQb3NpdGlvbik7XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VmFsdWUocmF3LCBrZXkpIHtcbiAgaWYgKCFyYXcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGNsZWFuc2VkID0gcmF3XG4gICAgLnRyaW0oKVxuICAgIC5yZXBsYWNlKC9GaWxlOi8sICcnKVxuICAgIC8vIEhhdmUgbm90IGZvdW5kIHJlYXNvbiBmb3IgdGhpcyBidXQgaXQgYnJlYWtzIHBhcnNpbmcsIHNvIHdlIGFyZSBqdXN0XG4gICAgLy8gcmVtb3ZpbmcgaXQgZm9yIG5vd1xuICAgIC5yZXBsYWNlKC9cXHtcXHtcXGQrXFx9XFx9L2csICcnKVxuICAgIC5yZXBsYWNlKGV4dHJhUHJvcGVydHlQYXR0ZXJuLCAnJylcbiAgICAucmVwbGFjZShlbmRpbmdQYXR0ZXJuLCAnJyk7XG5cbiAgaWYgKGNsZWFuc2VkID09PSAneScgfHwgY2xlYW5zZWQgPT09ICd5ZXMnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoa2V5ID09ICdiaXJ0aFBsYWNlJykge1xuICAgIHJldHVybiByYXcudHJpbSgpO1xuICB9XG5cbiAgLy8gSXMgaXQgYSBsaXN0IG9mIGxpbmtzPz9cbiAgY29uc3QgbGlua3MgPSBjbGVhbnNlZC5tYXRjaChsaW5rc1BhdHRlcm4pO1xuICBpZiAobGlua3MpIHtcbiAgICByZXR1cm4gbGlua3NbMF0uc3BsaXQobGlua1NlcGFyYXRvclBhdHRlcm4pLmZpbHRlcih0ZXh0ID0+IHRleHQpO1xuICB9XG5cbiAgcmV0dXJuIHRyaW1Pcih0cmltV3JhcHBlcnMoY2xlYW5zZWQpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRhdGFUeXBlKHsgZ2xvYmFsUGF0dGVybiwgcGFyc2VQYXR0ZXJuLCBwYXJzZSwgdmFyaWFibGUsIG5hbWUgfSkge1xuICByZXR1cm4gc291cmNlID0+IHtcbiAgICBjb25zdCBtYXRjaGVzID0gc291cmNlLm1hdGNoKGdsb2JhbFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW25hbWVdOiBbXSxcbiAgICAgICAgc291cmNlQWZ0ZXI6IHNvdXJjZSxcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaW5zdGFuY2VzID0gbWF0Y2hlcy5tYXAobWF0Y2ggPT4gcGFyc2UobWF0Y2gubWF0Y2gocGFyc2VQYXR0ZXJuKSkpO1xuICAgIGNvbnN0IHNvdXJjZUFmdGVyID0gbWF0Y2hlcy5yZWR1Y2UoKG1lbW8sIG1hdGNoLCBpbmRleCkgPT4ge1xuICAgICAgcmV0dXJuIG1lbW8ucmVwbGFjZShtYXRjaCwgYCQke3ZhcmlhYmxlfV8ke2luZGV4fWApO1xuICAgIH0sIHNvdXJjZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgW25hbWVdOiBpbnN0YW5jZXMsXG4gICAgICB9LFxuICAgICAgc291cmNlQWZ0ZXIsXG4gICAgfTtcbiAgfTtcbn1cbiIsImltcG9ydCBkYXRhVHlwZXMgZnJvbSAnLi4vZGF0YS10eXBlcy9pbmRleCc7XG5cbmZ1bmN0aW9uIGJ5RGF0YUhhbmRsZXIoeyBzb3VyY2UsIGNvbnRleHQgfSwgaGFuZGxlcikge1xuICBjb25zdCB7IGRhdGEsIHNvdXJjZUFmdGVyIH0gPSBoYW5kbGVyKHNvdXJjZSk7XG4gIHJldHVybiB7XG4gICAgY29udGV4dDogT2JqZWN0LmFzc2lnbih7fSwgY29udGV4dCwgZGF0YSksXG4gICAgc291cmNlOiBzb3VyY2VBZnRlcixcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdERhdGEoc291cmNlKSB7XG4gIHJldHVybiBkYXRhVHlwZXNcbiAgICAubWFwKHR5cGUgPT4gdHlwZS5oYW5kbGVyKVxuICAgIC5yZWR1Y2UoYnlEYXRhSGFuZGxlciwge1xuICAgICAgY29udGV4dDoge30sXG4gICAgICBzb3VyY2UsXG4gICAgfSk7XG59XG4iLCJpbXBvcnQgZ2V0VmFsdWUgZnJvbSAnLi9nZXRWYWx1ZSc7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2NhbWVsY2FzZSc7XG5cbmNvbnN0IGtleVZhbHVlR2xvYmFsUGF0dGVybiA9IC9cXHxcXHMqKFstJ1xcdTA0MDAtXFx1MDRGRlxcd1xcc10rKVxccyo9XFxzKihbXnxdKyk/L2c7XG5jb25zdCBrZXlWYWx1ZVBhdHRlcm4gPSAvXFx8XFxzKihbLSdcXHUwNDAwLVxcdTA0RkZcXHdcXHNdKylcXHMqPVxccyooW158XSspPy87XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmRQcm9wZXJ0eUxpc3Qoc291cmNlKSB7XG4gIGNvbnN0IGtleVZhbHVlUGFpcnMgPSBzb3VyY2UubWF0Y2goa2V5VmFsdWVHbG9iYWxQYXR0ZXJuKTtcbiAgaWYgKCFrZXlWYWx1ZVBhaXJzKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBrZXlWYWx1ZVBhaXJzXG4gICAgLm1hcChtYXRjaCA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBrZXlWYWx1ZVBhdHRlcm4uZXhlYyhtYXRjaCk7XG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IFssIHJhd0tleSwgcmF3VmFsdWVdID0gcmVzdWx0O1xuICAgICAgY29uc3Qga2V5ID0gY2FtZWxDYXNlKHJhd0tleS50cmltKCkpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5LFxuICAgICAgICB2YWx1ZTogZ2V0VmFsdWUocmF3VmFsdWUsIGtleSksXG4gICAgICB9O1xuICAgIH0pXG4gICAgLmZpbHRlcihpdGVtID0+IGl0ZW0pO1xufVxuIiwiaW1wb3J0IGRhdGFUeXBlcyBmcm9tICcuLi9kYXRhLXR5cGVzL2luZGV4JztcbmltcG9ydCBmaW5kUHJvcGVydHlMaXN0IGZyb20gJy4vcHJvcGVydHlMaXN0JztcbmltcG9ydCBudW1iZXJQYXJzZSBmcm9tICcuL251bWJlclBhcnNlJ1xuXG5jb25zdCBzbWFsbERhdGFUeXBlID0gZGF0YVR5cGVzLmZpbmQodHlwZSA9PiB0eXBlLm5hbWUgPT09ICdzbWFsbHMnKTtcblxuZnVuY3Rpb24gZmlsbFZhcmlhYmxlcyh2YWx1ZSwgY29udGV4dCwgeyBzaW1wbGlmeURhdGFWYWx1ZXMgfSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIGNvbnNvbGUubG9nKGBXYXJuaW5nOiBTb21ldGhpbmcgd2VudCB3cm9uZy4gQ291bGQgbm90IGZpbGwgdmFyaWFibGVzIGluOiAoJHt0eXBlb2YgdmFsdWV9KSAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1gKTtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgZGF0YVR5cGUgPSBkYXRhVHlwZXMuZmluZCh0eXBlID0+IHZhbHVlLm1hdGNoKHR5cGUucGF0dGVybikpO1xuICBpZiAoZGF0YVR5cGUpIHtcbiAgICBjb25zdCBbbWF0Y2hlZCwgaW5kZXhdID0gZGF0YVR5cGUucGF0dGVybi5leGVjKHZhbHVlKTtcbiAgICBjb25zdCBkYXRhVmFsdWUgPSBjb250ZXh0W2RhdGFUeXBlLm5hbWVdW3BhcnNlSW50KGluZGV4LCAxMCldO1xuICAgIGlmICghc2ltcGxpZnlEYXRhVmFsdWVzICYmIHR5cGVvZiBkYXRhVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShtYXRjaGVkLCBkYXRhVmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YVZhbHVlO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gUmVjdXJzaXZlIHZhcmFpYmxlIGZpbGxpbmcuLi4gZXZlbiBoYW5kbGVzIGFycmF5cyBvZiB2YWx1ZXNcbmZ1bmN0aW9uIGZpbGxWYXJpYWJsZXNVbnRpbERvbmUodmFsdWUsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKGl0ZW0gPT4gZmlsbFZhcmlhYmxlc1VudGlsRG9uZShpdGVtLCBjb250ZXh0LCBvcHRpb25zKSk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModmFsdWUpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihtZW1vLCB7XG4gICAgICAgIFtrZXldOiBmaWxsVmFyaWFibGVzVW50aWxEb25lKHZhbHVlW2tleV0sIGNvbnRleHQsIG9wdGlvbnMpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG4gICAgLy8gcmV0dXJuIHZhbHVlLm1hcChpdGVtID0+IGZpbGxWYXJpYWJsZXNVbnRpbERvbmUoaXRlbSwgY29udGV4dCwgb3B0aW9ucykpO1xuICB9XG4gIGNvbnN0IGZpbGxlZCA9IGZpbGxWYXJpYWJsZXModmFsdWUsIGNvbnRleHQsIG9wdGlvbnMpO1xuICBpZiAoZmlsbGVkID09PSB2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gZmlsbFZhcmlhYmxlc1VudGlsRG9uZShmaWxsZWQsIGNvbnRleHQsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTbWFsbERhdGEodmFsdWUsIGNvbnRleHQsIHsgc2ltcGxpZnlEYXRhVmFsdWVzIH0pIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUubWF0Y2goc21hbGxEYXRhVHlwZS5wYXR0ZXJuKSkge1xuICAgIGNvbnN0IHByaW1hcnkgPSB2YWx1ZVxuICAgICAgLnJlcGxhY2Uoc21hbGxEYXRhVHlwZS5wYXR0ZXJuLCAnJylcbiAgICAgIC8vIENsZWFuaW5nIHVwIGZyb20gaW5zZXJ0ZWQgY29tbWFzXG4gICAgICAucmVwbGFjZSgvLC8sICcnKVxuICAgICAgLnRyaW0oKTtcbiAgICBjb25zdCBbLCBpbmRleF0gPSBzbWFsbERhdGFUeXBlLnBhdHRlcm4uZXhlYyh2YWx1ZSk7XG4gICAgY29uc3Qgc2Vjb25kYXJ5ID0gY29udGV4dFtzbWFsbERhdGFUeXBlLm5hbWVdW3BhcnNlSW50KGluZGV4LCAxMCldO1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIHByaW1hcnk6IGdldFZhcmlhYmxlVmFsdWUocHJpbWFyeSwgY29udGV4dCwgeyBzaW1wbGlmeURhdGFWYWx1ZXMgfSksXG4gICAgICBzZWNvbmRhcnk6IGdldFZhcmlhYmxlVmFsdWUoc2Vjb25kYXJ5LCBjb250ZXh0LCB7IHNpbXBsaWZ5RGF0YVZhbHVlcyB9KSxcbiAgICB9O1xuICAgIHJldHVybiBzaW1wbGlmeURhdGFWYWx1ZXMgPyByZXN1bHQucHJpbWFyeSA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0VmFyaWFibGVWYWx1ZSh2YWx1ZSwgY29udGV4dCwgeyBzaW1wbGlmeURhdGFWYWx1ZXMgPSB0cnVlIH0gPSB7fSkge1xuICAvLyBIYW5kbGluZyBzbWFsbCBkYXRhIGRpZmZlcmVudGx5Li4uIEkgZG9udCBsaWtlIHRoaXMuLi5cbiAgY29uc3Qgc21hbGxEYXRhID0gaGFuZGxlU21hbGxEYXRhKHZhbHVlLCBjb250ZXh0LCB7IHNpbXBsaWZ5RGF0YVZhbHVlcyB9KTtcbiAgaWYgKHNtYWxsRGF0YSkge1xuICAgIHJldHVybiBzbWFsbERhdGE7XG4gIH1cbiAgcmV0dXJuIGZpbGxWYXJpYWJsZXNVbnRpbERvbmUodmFsdWUsIGNvbnRleHQsIHsgc2ltcGxpZnlEYXRhVmFsdWVzIH0pO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VWYXJpYWJsZShrZXksIHZhbHVlLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICAvLyBGaXJzdCBhcnJheSBwYXNzLi4uXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5tYXAoaXRlbSA9PiBnZXRWYXJpYWJsZVZhbHVlKGl0ZW0sIGNvbnRleHQsIG9wdGlvbnMpKTtcbiAgfVxuICBpZiAoa2V5Lm1hdGNoKC9hcmVhVG90YWwvKSB8fCBrZXkubWF0Y2goL3BvcHVsYXRpb24vKSkge1xuICAgIGxldCBmbG9hdCA9IG51bWJlclBhcnNlKHZhbHVlKTtcbiAgICBpZiAoZmxvYXQgPT09IGZhbHNlKSBmbG9hdCA9IHBhcnNlRmxvYXQodmFsdWUsIDEwKTtcbiAgICBpZiAoIWlzTmFOKGZsb2F0KSkge1xuICAgICAgcmV0dXJuIGZsb2F0O1xuICAgIH1cbiAgfVxuICBpZiAoa2V5Lm1hdGNoKC9kYXRlL2kpKSB7XG4gICAgY29uc3QgZGF0ZVZhbHVlID0gK25ldyBEYXRlKHZhbHVlKTtcbiAgICBpZiAoIWlzTmFOKGRhdGVWYWx1ZSkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHZhcmlhYmxlVmFsdWUgPSBnZXRWYXJpYWJsZVZhbHVlKHZhbHVlLCBjb250ZXh0LCBvcHRpb25zKTtcblxuICAvLyBTZWNvbmQgYXJyYXkgcGFzcy4gSWYgZmlyc3QgdmFyaWFibGUgd2FzIGFuIGFycmF5IG9mIHZhcmlhYmxlcy5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFyaWFibGVWYWx1ZSkpIHtcbiAgICByZXR1cm4gdmFyaWFibGVWYWx1ZS5tYXAoaXRlbSA9PiBnZXRWYXJpYWJsZVZhbHVlKGl0ZW0sIGNvbnRleHQsIG9wdGlvbnMpKTtcbiAgfVxuICByZXR1cm4gdmFyaWFibGVWYWx1ZTtcbn1cblxuZnVuY3Rpb24gYnlWYXJpYWJsZVJlZHVjdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gIHJldHVybiAobWVtbywgeyBrZXksIHZhbHVlIH0pID0+IHtcbiAgICBjb25zdCByZWR1Y2VkID0gcmVkdWNlVmFyaWFibGUoa2V5LCB2YWx1ZSwgY29udGV4dCwgb3B0aW9ucyk7XG4gICAgaWYgKHJlZHVjZWQgPT09ICcnIHx8IHJlZHVjZWQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgbWVtbywge1xuICAgICAgW2tleV06IHJlZHVjZWQsXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdFByb3BlcnRpZXMoeyBzb3VyY2UsIGNvbnRleHQgfSwgb3B0aW9ucykge1xuICByZXR1cm4gZmluZFByb3BlcnR5TGlzdChzb3VyY2UpLnJlZHVjZShieVZhcmlhYmxlUmVkdWN0aW9uKGNvbnRleHQsIG9wdGlvbnMpLCB7fSk7XG59XG4iLCIvLyBpbXBvcnQgZ2V0VmFsdWUgZnJvbSAnLi9nZXRWYWx1ZSc7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2NhbWVsY2FzZSc7XG5cbmNvbnN0IGJsYW5rTmFtZVBhdHRlcm4gPSAvYmxhbmsoXFxkKyk/TmFtZVNlYzIvO1xuY29uc3QgYmxhbmtJbmZvUGF0dGVybiA9IC9ibGFuayhcXGQrKT9JbmZvU2VjMi87XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybVByb3BlcnRpZXMocHJvcGVydGllcykge1xuICByZXR1cm4gT2JqZWN0LmtleXMocHJvcGVydGllcylcbiAgICAucmVkdWNlKCh0cmFuc2Zvcm1lZCwga2V5KSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHByb3BlcnRpZXNba2V5XTtcbiAgICAgIGNvbnN0IG1hdGNoID0ga2V5Lm1hdGNoKGJsYW5rTmFtZVBhdHRlcm4pO1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGNvbnN0IGlkID0gbWF0Y2hbMV0gfHwgJyc7XG4gICAgICAgIGNvbnN0IGJsYW5rTmFtZSA9IHByb3BlcnRpZXNbYGJsYW5rJHtpZH1OYW1lU2VjMmBdO1xuICAgICAgICBjb25zdCBibGFua0luZm8gPSBwcm9wZXJ0aWVzW2BibGFuayR7aWR9SW5mb1NlYzJgXTtcbiAgICAgICAgaWYgKHR5cGVvZiBibGFua05hbWUgIT09ICdzdHJpbmcnKSByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHRyYW5zZm9ybWVkLCB7XG4gICAgICAgICAgW2NhbWVsQ2FzZShibGFua05hbWUpXTogYmxhbmtJbmZvLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkubWF0Y2goYmxhbmtJbmZvUGF0dGVybikpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24odHJhbnNmb3JtZWQsIHtcbiAgICAgICAgW2tleV06IHZhbHVlLFxuICAgICAgfSk7XG4gICAgfSwge30pO1xufVxuIiwiZnVuY3Rpb24gZmluZE91dGVySW5kZXgoc291cmNlKSB7XG5cdGxldCBsYXN0T3BlbiA9IFtdO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBjb25zdCBuZXh0VHdvID0gc291cmNlLnN1YnN0cihpLCAyKTtcbiAgICBpZiAobmV4dFR3byA9PT0gJ3t7Jykge1xuXHRcdFx0bGFzdE9wZW4ucHVzaChpKTtcblx0XHRcdC8vIE1vdmUgZm9yd2FyZCwgc28gd2UgZG8gbm90IGNvdW50IGNsb3N1cmVzIHJpZ2h0IG5leHQgdG8gZWFjaCBvdGhlclxuXHRcdFx0aSsrO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuICAgIGlmIChuZXh0VHdvID09PSAnfX0nKSB7XG5cdFx0XHRjb25zdCBvcGVuQXQgPSBsYXN0T3Blbi5wb3AoKTtcblx0XHRcdGlmIChsYXN0T3Blbi5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0Ly8gQWRkaW5nIDIgaGVyZSBmb3IgdGhlIGNsb3N1cmVcblx0XHRcdFx0cmV0dXJuIGkgKyAyO1xuXHRcdFx0fVxuXHRcdFx0Ly8gTW92ZSBmb3J3YXJkLCBzbyB3ZSBkbyBub3QgY291bnQgY2xvc3VyZXMgcmlnaHQgbmV4dCB0byBlYWNoIG90aGVyXG5cdFx0XHRpKys7XG5cdFx0fSAgICBcbiAgfVxufVxuXG5jb25zdCBpbmZvQm94U3RhcnRQYXR0ZXJuID0gL3t7XFx3KmJveC87XG5cbmZ1bmN0aW9uIHBhcnNlKHNvdXJjZSkge1xuXHRjb25zdCBzdGFydE1hdGNoID0gc291cmNlLm1hdGNoKGluZm9Cb3hTdGFydFBhdHRlcm4pO1xuXHRpZiAoIXN0YXJ0TWF0Y2gpIHtcblx0XHQvLyBNYXkgbm90IGhhdmUgYSBhIHByb3BlciBpbmZvYm94IHdyYXBwZXIsIGxldCdzIHVzZSB0aGUgZW50aXJlIHNvdXJjZVxuXHRcdC8vIGJ5IGRlZmF1bHRcblx0XHRyZXR1cm4geyBkYXRhOiBzb3VyY2UsIHNvdXJjZUxlZnQ6IG51bGwgfTtcblx0fVxuXHRjb25zdCBzdGFydEluZGV4ID0gc3RhcnRNYXRjaC5pbmRleDtcblx0Y29uc3Qgd2l0aFN0YXJ0ID0gc291cmNlLnN1YnN0cmluZyhzdGFydEluZGV4KTtcblx0Y29uc3Qgb3V0ZXJJbmRleCA9IGZpbmRPdXRlckluZGV4KHdpdGhTdGFydCk7XG5cdGlmICghb3V0ZXJJbmRleCkge1xuXHRcdHJldHVybiB7IGRhdGE6IHNvdXJjZSwgc291cmNlTGVmdDogbnVsbCB9O1xuXHR9XG5cdGNvbnN0IGRhdGEgPSB3aXRoU3RhcnQuc3Vic3RyaW5nKDAsIG91dGVySW5kZXgpO1xuXHRjb25zdCBzb3VyY2VMZWZ0ID0gc291cmNlLnN1YnN0cmluZyhvdXRlckluZGV4KTtcblx0Y29uc3Qgc291cmNlTGVmdEhhc01hdGNoID0gISFzb3VyY2VMZWZ0Lm1hdGNoKGluZm9Cb3hTdGFydFBhdHRlcm4pO1xuXHRyZXR1cm4ge1xuXHRcdGRhdGEsXG5cdFx0c291cmNlTGVmdDogc291cmNlTGVmdEhhc01hdGNoID8gc291cmNlTGVmdCA6IG51bGxcblx0fTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdEluZm9ib3hlcyhzb3VyY2UpIHtcbiAgbGV0IHBhcnNlZCA9IHBhcnNlKHNvdXJjZSk7XG4gIGNvbnN0IGluZm9ib3hlcyA9IFtwYXJzZWQuZGF0YV07XG4gIHdoaWxlKHBhcnNlZC5zb3VyY2VMZWZ0KSB7XG4gIFx0cGFyc2VkID0gcGFyc2UocGFyc2VkLnNvdXJjZUxlZnQpO1xuICBcdGluZm9ib3hlcy5wdXNoKHBhcnNlZC5kYXRhKTtcbiAgfVxuICByZXR1cm4gaW5mb2JveGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYW5Tb3VyY2Uoc291cmNlKSB7XG5cdHJldHVybiBzb3VyY2VcbiAgICAucmVwbGFjZSgvJycvZywgJycpXG4gICAgLnJlcGxhY2UoL1xcfGRpc3BsYXk9aW5saW5lL2csICcnKVxuICAgIC8vIFRoaXMgaXMgYSBsaXR0bGUgaWZmeVxuICAgIC5yZXBsYWNlKC88YnJcXHM/XFwvPz4vZywgJywnKVxuICAgIC5yZXBsYWNlKC88cmVmKFxcc1xcdys9W14+XSspPz4uKjxcXC9yZWY+L2csICcnKVxuICAgIC5yZXBsYWNlKC8mbWludXM7L2csICctJylcbiAgICAucmVwbGFjZSgvPHN1cD4vZywgJ14nKVxuICAgIC8vIFJlbW92ZSBzaG9ydGVuZWQgZm9vdG5vdGUgdGVtcGxhdGVzXG4gICAgLnJlcGxhY2UoL1xce1xce3NmblxcfChbXlxcfVxcfV0rKVxcfVxcfS9nLCAnJylcbiAgICAucmVwbGFjZSgv4oiSL2csICctJylcbiAgICAucmVwbGFjZSgvPFxcL3N1cD4vZywgJycpXG4gICAgLnJlcGxhY2UoLzxyZWYoXFxzXFx3Kz1bXj5dKyk/XFxzP1xcLz4vZywgJycpXG4gICAgLy8gSFRNTCBjb21tZW50c1xuICAgIC5yZXBsYWNlKC88IS0tKFtcXHNcXFNdKj8pLS0+L2csICcnKVxuICAgIC5yZXBsYWNlKC8mbmJzcDsvZywgJyAnKVxuICAgIC5yZXBsYWNlKCd8XFwnXFwnU2VlIGxpc3RcXCdcXCcnLCAnJyk7XG59XG4iLCJpbXBvcnQgY2FtZWxjYXNlIGZyb20gJ2NhbWVsY2FzZSc7XG5cbmNvbnN0IHRhYmxlU3RhcnRQYXR0ZXJuID0gL3tcXHwoLiopXFxuPy87XG5jb25zdCB0YWJsZUVuZFBhdHRlcm4gPSAvXFxuXFx8fS87XG5jb25zdCBoZWFkZXJzUGF0dGVybiA9IC8hXFxzPyguKikvZztcbmNvbnN0IHJvd1BhdHRlcm4gPSAvXFx8LS87XG5jb25zdCBjZWxsU2VwYXJhdG9yUGF0dGVybiA9IC8oPzpcXG5cXHwpfCg/OlxcfFxcfCkvO1xuY29uc3QgbGlua1BhdHRlcm4gPSAvXFxbXFxbKFteXFxdXSspXFxdXFxdL2c7XG5jb25zdCBsaW5rTmFtZVBhdHRlcm4gPSAvXi4qXFx8LztcbmNvbnN0IGlubGluZUhlYWRlclBhdHRlcm4gPSAnISEnO1xuY29uc3QgYWN0aW9uUGF0dGVybiA9IC97e2FuY2hvclxcfCguKil9fS9nO1xuY29uc3QgdGlja3MgPSAvJycnL2c7XG5jb25zdCByb3dTcGFuQ291bnRQYXR0ZXJuID0gL3Jvd3NwYW49XCIoXFxkKylcIi87XG5cbmNvbnN0IHN0cmlwTGlua3MgPSBzb3VyY2UgPT4gc291cmNlLnJlcGxhY2UobGlua1BhdHRlcm4sIChtLCBjYXB0dXJlKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gY2FwdHVyZS5yZXBsYWNlKGxpbmtOYW1lUGF0dGVybiwgJycpLnRyaW0oKTtcbiAgICByZXR1cm4gcmVzdWx0IHx8IGNhcHR1cmU7XG59KVxuY29uc3QgcmVtb3ZlQWN0aW9ucyA9IHNvdXJjZSA9PiBzb3VyY2UucmVwbGFjZShhY3Rpb25QYXR0ZXJuLCAnJylcbmNvbnN0IHRyYW5zZm9ybUNlbGwgPSBzb3VyY2UgPT4gc3RyaXBMaW5rcyhyZW1vdmVBY3Rpb25zKHNvdXJjZSB8fCAnJykpXG4gICAgLnJlcGxhY2Uocm93U3BhbkNvdW50UGF0dGVybiwgJycpXG4gICAgLnJlcGxhY2UobGlua05hbWVQYXR0ZXJuLCAnJylcbiAgICAucmVwbGFjZSh0aWNrcywgJycpXG4gICAgLnRyaW0oKVxuXG5jb25zdCB0cmFuc2Zvcm1DZWxscyA9IHJvdyA9PiByb3cuc3BsaXQoY2VsbFNlcGFyYXRvclBhdHRlcm4pLm1hcCh0cmFuc2Zvcm1DZWxsKVxuXG5jb25zdCBmaW5kSW5kZXggPSAodCwgcCkgPT4ge1xuICAgIGNvbnN0IG0gPSB0Lm1hdGNoKHApO1xuICAgIHJldHVybiBtID8gbS5pbmRleCA6IC0xO1xufVxuXG5jb25zdCBmaW5kVGFibGVTdGFydCA9IHNvdXJjZSA9PiB7XG4gICAgY29uc3QgbSA9IHNvdXJjZS5tYXRjaCh0YWJsZVN0YXJ0UGF0dGVybik7XG4gICAgcmV0dXJuIG0gPyBtLmluZGV4ICsgbVswXS5sZW5ndGggOiAtMTtcbn1cbmNvbnN0IGZpbmRUYWJsZUVuZCA9IHNvdXJjZSA9PiBmaW5kSW5kZXgoc291cmNlLCB0YWJsZUVuZFBhdHRlcm4pXG5cbmNvbnN0IGdldEhlYWRlcnMgPSBzb3VyY2UgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBbXTtcbiAgICBsZXQgbWF0Y2g7XG4gICAgd2hpbGUgKG1hdGNoID0gaGVhZGVyc1BhdHRlcm4uZXhlYyhzb3VyY2UpKSB7XG4gICAgICAgIGhlYWRlcnMucHVzaCguLi5tYXRjaFsxXS5zcGxpdChpbmxpbmVIZWFkZXJQYXR0ZXJuKS5tYXAodHJhbnNmb3JtQ2VsbCkpO1xuICAgIH1cbiAgICByZXR1cm4gaGVhZGVycztcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtUm93U3Bhbihyb3dzKSB7XG4gICAgcmV0dXJuIHJvd3NcbiAgICAgICAgLm1hcCh0cmFuc2Zvcm1DZWxscylcbiAgICAgICAgLnJlZHVjZSgobWVyZ2VkLCBjZWxscywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGsgPSBpbmRleCA9PT0gMCA/IDAgOiAxO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjZWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICghbWVyZ2VkW2kgKyBrXSkgbWVyZ2VkW2kgKyBrXSA9IHt9OyAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChjZWxsc1tpXSkge1xuICAgICAgICAgICAgICAgICAgICBtZXJnZWRbaSArIGtdW2NlbGxzW2ldXSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lcmdlZDtcbiAgICAgICAgfSwgW10pXG4gICAgICAgIC5tYXAobyA9PiBPYmplY3Qua2V5cyhvKS5qb2luKCcsJykpXG4gICAgICAgIC5qb2luKCcgfHwgJyk7XG59XG5cbmNvbnN0IGdldFJvd3MgPSBzb3VyY2UgPT4ge1xuICAgIGNvbnN0IHJhdyA9IHNvdXJjZVxuICAgICAgICAuc3BsaXQocm93UGF0dGVybilcbiAgICAgICAgLm1hcChlID0+IGUucmVwbGFjZSgvXi4qXFxuKz9cXHwvLCAnJykudHJpbSgpKVxuICAgICAgICAuZmlsdGVyKGUgPT4gZSk7XG5cbiAgICBjb25zdCByb3dzID0gW107XG4gICAgbGV0IHNwYW5OID0gMDtcbiAgICBsZXQgc3BhbkNvdW50ID0gMDtcbiAgICBsZXQgcm93c0luU3BhbiA9IFtdO1xuXG4gICAgZm9yIChjb25zdCByb3cgb2YgcmF3ICl7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gcm93Lm1hdGNoKHJvd1NwYW5Db3VudFBhdHRlcm4pO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHNwYW5OID0gMDtcbiAgICAgICAgICAgIHNwYW5Db3VudCA9IHBhcnNlSW50KG1hdGNoWzFdKTtcbiAgICAgICAgICAgIHJvd3NJblNwYW4gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3Bhbk4gPCBzcGFuQ291bnQpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHJvd3NJblNwYW4ucHVzaChyb3cpO1xuICAgICAgICAgICAgaWYgKCsrc3Bhbk4gPT09IHNwYW5Db3VudCkge1xuICAgICAgICAgICAgICAgIHJvd3MucHVzaCh0cmFuc2Zvcm1Sb3dTcGFuKHJvd3NJblNwYW4pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgcm93cy5wdXNoKHJvdylcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByb3dzO1xufVxuICAgIFxuY29uc3QgZ2V0TmV4dFRhYmxlID0gc291cmNlID0+IHtcbiAgICBsZXQgbGVmdCA9IHNvdXJjZTtcbiAgICBjb25zdCBzdGFydCA9IGZpbmRUYWJsZVN0YXJ0KGxlZnQpO1xuICAgIFxuICAgIGlmIChzdGFydCA9PT0gLTEpIHJldHVybiBudWxsOyAgICBcbiAgICBsZWZ0ID0gbGVmdC5zdWJzdHJpbmcoc3RhcnQpO1xuICAgIFxuICAgIGNvbnN0IGVuZCA9IGZpbmRUYWJsZUVuZChsZWZ0KTtcblxuICAgIGlmIChlbmQgPT09IC0xKSByZXR1cm4gbnVsbDtcbiAgICBsZWZ0ID0gbGVmdC5zdWJzdHJpbmcoMCwgZW5kKTtcblxuICAgIGNvbnN0IHJvd3MgPSBnZXRSb3dzKGxlZnQpO1xuXG4gICAgaWYgKCFyb3dzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgXG4gICAgY29uc3QgaGVhZGVycyA9IGdldEhlYWRlcnMocm93c1swXSk7XG5cbiAgICBpZiAoIWhlYWRlcnMubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IGRhdGEgPSByb3dzLnNsaWNlKDEpLm1hcCh0cmFuc2Zvcm1DZWxscykubWFwKHJvdyA9PiB7XG4gICAgICAgIHJldHVybiBoZWFkZXJzLnJlZHVjZSgob2JqLCBrZXksIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBvYmpbY2FtZWxjYXNlKGtleSldID0gcm93W2luZGV4XTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7IGRhdGEsIGVuZDogc3RhcnQgKyBlbmQgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgIGNvbnN0IHRhYmxlcyA9IFtdIDtcbiAgICBsZXQgbGVmdCA9IHNvdXJjZTtcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICB3aGlsZShyZXN1bHQgPSBnZXROZXh0VGFibGUobGVmdCkpIHtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWJsZXM7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgICB0YWJsZXMucHVzaChyZXN1bHQuZGF0YSk7XG4gICAgICAgIGxlZnQgPSBsZWZ0LnN1YnN0cmluZyhyZXN1bHQuZW5kKTtcbiAgICB9XG5cdHJldHVybiB0YWJsZXM7XG59XG4iLCJjb25zdCBoZWFkaW5nUGF0dGVybiA9IC9bXj1dPT1cXHM/KFtcXHdcXHNdKylcXHM/PT0vZ1xuY29uc3Qgc3ViaGVhZGluZ1BhdHRlcm4gPSAvPT09KFtcXHdcXHNdKyk9PT0vZ1xuY29uc3QgdGFibGVTdGFydFBhdHRlcm4gPSAve3tsaXN0LitzdGFydC4qfX0vZ2lcbmNvbnN0IHRhYmxlRW5kUGF0dGVybiA9IC97e2xpc3QuK2VuZC4qfX0vZ2lcbmNvbnN0IHJvd1BhdHRlcm4gPSAve3soLiopfX0vZ1xuY29uc3Qgcm93UGF0dGVyblNpbmdsZSA9IC97eyguKil9fS9cblxuZnVuY3Rpb24gZ2V0SGVhZGluZ3ModGV4dCkge1xuXHRsZXQgbWF0Y2g7XG5cdGNvbnN0IGhlYWRpbmdzID0gW107XG5cdHdoaWxlICgobWF0Y2ggPSBoZWFkaW5nUGF0dGVybi5leGVjKHRleHQpKSAhPT0gbnVsbCkge1xuXHRcdGhlYWRpbmdzLnB1c2goe1xuXHRcdFx0aGVhZGluZzogbWF0Y2hbMV0udHJpbSgpLFxuXHRcdFx0c3RhcnQ6IG1hdGNoLmluZGV4LFxuXHRcdFx0ZW5kOiBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aFxuXHRcdH0pXG5cdH1cblx0cmV0dXJuIGhlYWRpbmdzO1xufVxuXG5mdW5jdGlvbiBnZXRTdWJoZWFkaW5ncyh0ZXh0KSB7XG5cdGxldCBtYXRjaDtcblx0Y29uc3Qgc3ViaGVhZGluZ3MgPSBbXTtcblx0d2hpbGUgKChtYXRjaCA9IHN1YmhlYWRpbmdQYXR0ZXJuLmV4ZWModGV4dCkpICE9PSBudWxsKSB7XG5cdFx0c3ViaGVhZGluZ3MucHVzaCh7XG5cdFx0XHRoZWFkaW5nOiBtYXRjaFsxXS50cmltKCksXG5cdFx0XHRzdGFydDogbWF0Y2guaW5kZXgsXG5cdFx0XHRlbmQ6IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXG5cdFx0fSlcblx0fVxuXHRyZXR1cm4gc3ViaGVhZGluZ3M7XG59XG5cbmZ1bmN0aW9uIGdldE1hdGNoZXModGV4dCwgcGF0dGVybikge1xuXHRsZXQgbWF0Y2g7XG5cdGNvbnN0IG1hdGNoZXMgPSBbXTtcblx0d2hpbGUgKChtYXRjaCA9IHBhdHRlcm4uZXhlYyh0ZXh0KSkgIT09IG51bGwpIHtcblx0XHRtYXRjaGVzLnB1c2goe1xuXHRcdFx0dmFsdWU6IG1hdGNoWzFdICYmIG1hdGNoWzFdLnRyaW0oKSxcblx0XHRcdHN0YXJ0OiBtYXRjaC5pbmRleCxcblx0XHRcdGVuZDogbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGhcblx0XHR9KVxuXHR9XG5cdHJldHVybiBtYXRjaGVzO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRhYmxlRGF0YShyYXcpIHtcblx0Y29uc3QgbWF0Y2hlcyA9IHJhdy5tYXRjaChyb3dQYXR0ZXJuKTtcblx0aWYgKCFtYXRjaGVzKSByZXR1cm4gW107XG5cdHJldHVybiBtYXRjaGVzLm1hcChlbCA9PiB7XG5cdFx0Y29uc3QgWyx0ZXh0XSA9IGVsLm1hdGNoKHJvd1BhdHRlcm5TaW5nbGUpO1xuXHRcdGNvbnN0IGNvbHVtbnMgPSB0ZXh0LnRyaW0oKS5zcGxpdCgnfCcpO1xuXHRcdHJldHVybiBjb2x1bW5zLnNsaWNlKDEpO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0VGFibGVzKHRleHQpIHtcblx0Y29uc3QgdGFibGVTdGFydHMgPSBnZXRNYXRjaGVzKHRleHQsIHRhYmxlU3RhcnRQYXR0ZXJuKTtcblx0Y29uc3QgdGFibGVFbmRzID0gZ2V0TWF0Y2hlcyh0ZXh0LCB0YWJsZUVuZFBhdHRlcm4pO1xuXHRyZXR1cm4gdGFibGVTdGFydHMubWFwKCh0YWJsZVN0YXJ0LCBpbmRleCkgPT4ge1xuXHRcdGNvbnN0IHRhYmxlRW5kID0gdGFibGVFbmRzW2luZGV4XTtcblx0XHRpZiAoIXRhYmxlRW5kKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1tUYWJsZSBQYXJzaW5nXSBGYWlsZWQgdG8gcGFpciB0YWJsZScpO1xuXHRcdH1cblx0XHRjb25zdCByYXcgPSB0ZXh0XG5cdFx0XHRcdC5zdWJzdHJpbmcodGFibGVTdGFydC5lbmQsIHRhYmxlRW5kLnN0YXJ0KVxuXHRcdFx0XHQudHJpbSgpXG5cdFx0XHRcdC5yZXBsYWNlKC8nJycvZywgJycpO1xuXHRcdHJldHVybiB7XG5cdFx0XHRyb3dzOiBwYXJzZVRhYmxlRGF0YShyYXcpLFxuXHRcdFx0c3RhcnQ6IHRhYmxlU3RhcnQuc3RhcnQsXG5cdFx0XHRlbmQ6IHRhYmxlRW5kLmVuZFxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIGxhc3QobGlzdCkge1xuXHRyZXR1cm4gbGlzdC5sZW5ndGggPyBsaXN0W2xpc3QubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0Y29uc3QgaGVhZGluZ3MgPSBnZXRNYXRjaGVzKHNvdXJjZSwgaGVhZGluZ1BhdHRlcm4pO1xuXHRjb25zdCBzdWJoZWFkaW5ncyA9IGdldE1hdGNoZXMoc291cmNlLCBzdWJoZWFkaW5nUGF0dGVybik7XG5cdGNvbnN0IHRhYmxlcyA9IGdldFRhYmxlcyhzb3VyY2UpO1xuXG5cdHRhYmxlcy5mb3JFYWNoKHRhYmxlID0+IHtcblx0XHRjb25zdCBoZWFkaW5nc0JlZm9yZSA9IGhlYWRpbmdzLmZpbHRlcihoZWFkaW5nID0+IHtcblx0XHRcdHJldHVybiBoZWFkaW5nLmVuZCA8IHRhYmxlLnN0YXJ0O1xuXHRcdH0pLm1hcChlID0+IGUudmFsdWUpXG5cdFx0dGFibGUuaGVhZGluZyA9IGxhc3QoaGVhZGluZ3NCZWZvcmUpO1xuXHRcdGNvbnN0IHN1YmhlYWRpbmdzQmVmb3JlID0gc3ViaGVhZGluZ3MuZmlsdGVyKHN1YmhlYWRpbmcgPT4ge1xuXHRcdFx0cmV0dXJuIHN1YmhlYWRpbmcuZW5kIDwgdGFibGUuc3RhcnQ7XG5cdFx0fSkubWFwKGUgPT4gZS52YWx1ZSlcblx0XHR0YWJsZS5zdWJoZWFkaW5nID0gbGFzdChzdWJoZWFkaW5nc0JlZm9yZSk7XG5cdFx0ZGVsZXRlIHRhYmxlLnN0YXJ0O1xuXHRcdGRlbGV0ZSB0YWJsZS5lbmQ7XG5cdH0pO1xuXG5cdHJldHVybiB0YWJsZXM7XG59IiwiY29uc3Qgc21hbGxHbG9iYWxQYXR0ZXJuID0gL1xce1xce3NtYWxsXFx8KFteXFx9XFx9XSspXFx9XFx9L2c7XG5jb25zdCBzbWFsbFBhdHRlcm4gPSAvc21hbGxcXHwoW15cXH1cXH1dKylcXH1cXH0vO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IHNtYWxsR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBzbWFsbFBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCB2YWx1ZV0gPSByZXN1bHRzO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgdmFyaWFibGU6ICdTTUFMTCcsXG4gIG5hbWU6ICdzbWFsbHMnLFxufTtcbiIsImNvbnN0IGZsYWdHbG9iYWxQYXR0ZXJuID0gL1xce1xce2ZsYWdcXHwoW15cXH1cXH1dKylcXH1cXH0vZztcbmNvbnN0IGZsYWdQYXR0ZXJuID0gL2ZsYWdcXHwoW15cXH1cXH1dKylcXH1cXH0vO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGZsYWdHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IGZsYWdQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgY29uc3QgWywgdmFsdWVdID0gcmVzdWx0cztcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIHZhcmlhYmxlOiAnRkxBRycsXG4gIG5hbWU6ICdmbGFncycsXG59O1xuIiwiY29uc3QgY29vcmRzR2xvYmFsUGF0dGVybiA9IC9cXHtcXHtjb29yZFxcfChbXlxcfVxcfV0rKVxcfVxcfS9nO1xuY29uc3QgY29vcmRzUGF0dGVybiA9IC9jb29yZFxcfChbXlxcfVxcfV0rKVxcfVxcfS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogY29vcmRzR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBjb29yZHNQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgY29uc3QgWywgdmFsdWVdID0gcmVzdWx0cztcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIHZhcmlhYmxlOiAnQ09PUkQnLFxuICBuYW1lOiAnY29vcmRzJyxcbn07XG4iLCJjb25zdCBnbG9iYWxQYXR0ZXJuID0gL1xcW1xcWyhbXlxcXVxcfF0rKVxcfD8oW15cXF1dKyk/XFxdXFxdL2c7XG5jb25zdCBwYXR0ZXJuID0gL1xcW1xcWyhbXlxcXVxcfF0rKVxcfD8oW15cXF1dKyk/XFxdXFxdLztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBnbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IHBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCB2YWx1ZSwgdHlwZV0gPSByZXN1bHRzO1xuICAgIHJldHVybiB2YWx1ZSB8fCB0eXBlO1xuICB9LFxuICB2YXJpYWJsZTogJ0lOU1RBTkNFJyxcbiAgbmFtZTogJ2luc3RhbmNlcycsXG59O1xuIiwiaW1wb3J0IGdldFZhbHVlIGZyb20gJy4uL3V0aWwvZ2V0VmFsdWUnO1xuXG5jb25zdCBsaXN0SXRlbVByZWZpeFBhdHRlcm4gPSAvXlxcfFxccz8vO1xuY29uc3QgdW5idWxsZXRlZExpc3RHbG9iYWxQYXR0ZXJuID0gL1xce1xceyg/OnVuYnVsbGV0ZWQgbGlzdHx1Ymx8dWJ0fHVibGlzdHx1bmJ1bGxldClcXHM/XFx8KFteXFx9XFx9XSspXFx9XFx9L2c7XG5jb25zdCB1bmJ1bGxldGVkTGlzdEl0ZW1QYXR0ZXJuID0gL1xcfFxccyooW158fV0rKS9nO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IHVuYnVsbGV0ZWRMaXN0R2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiB1bmJ1bGxldGVkTGlzdEl0ZW1QYXR0ZXJuLFxuICBwYXJzZTogbGlzdEl0ZW1zID0+IHtcbiAgICBpZiAoIWxpc3RJdGVtcykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdEl0ZW1zXG4gICAgICAubWFwKGl0ZW0gPT4gaXRlbS5yZXBsYWNlKGxpc3RJdGVtUHJlZml4UGF0dGVybiwgJycpLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIodmFsdWUgPT4gdmFsdWUgJiYgdmFsdWUubGVuZ3RoKTtcbiAgfSxcbiAgdmFyaWFibGU6ICdVTkJVTExFVEVEX0xJU1QnLFxuICBuYW1lOiAndW5idWxsZXRlZExpc3RzJyxcbn07XG4iLCJjb25zdCBsaXN0SXRlbVByZWZpeFBhdHRlcm4gPSAvXlxcKlxccyovO1xuY29uc3QgcGxhaW5MaXN0R2xvYmFsUGF0dGVybiA9IC9cXG4oXFwqXFxzKlteKnxdKykrL2c7XG5jb25zdCBwbGFpbkxpc3RJdGVtUGF0dGVybiA9IC9cXCpcXHMqKFteKnxdKykvZztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBwbGFpbkxpc3RHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IHBsYWluTGlzdEl0ZW1QYXR0ZXJuLFxuICBwYXJzZTogbGlzdEl0ZW1zID0+IHtcbiAgICBpZiAoIWxpc3RJdGVtcykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdEl0ZW1zXG4gICAgICAubWFwKGl0ZW0gPT4gaXRlbS5yZXBsYWNlKGxpc3RJdGVtUHJlZml4UGF0dGVybiwgJycpLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIodmFsdWUgPT4gdmFsdWUgJiYgdmFsdWUubGVuZ3RoKTtcbiAgfSxcbiAgdmFyaWFibGU6ICdVTk1BUktFRF9MSVNUJyxcbiAgbmFtZTogJ3VubWFya2VkTGlzdHMnLFxufTtcbiIsImltcG9ydCBnZXRWYWx1ZSBmcm9tICcuLi91dGlsL2dldFZhbHVlJztcblxuY29uc3QgbGlzdEl0ZW1QcmVmaXhQYXR0ZXJuID0gL15cXCpcXHM/LztcbmNvbnN0IHBsYWluTGlzdEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7Zj9wP1A/bD9hP2k/bj90P2xpc3RcXHM/XFx8KFteXFx9XFx9XSspXFx9XFx9L2c7XG5jb25zdCBwbGFpbkxpc3RJdGVtUGF0dGVybiA9IC9cXCpcXHMqKFteKn1dKykvZztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBwbGFpbkxpc3RHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IHBsYWluTGlzdEl0ZW1QYXR0ZXJuLFxuICBwYXJzZTogbGlzdEl0ZW1zID0+IHtcbiAgICBpZiAoIWxpc3RJdGVtcykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdEl0ZW1zXG4gICAgICAubWFwKGl0ZW0gPT4gaXRlbS5yZXBsYWNlKGxpc3RJdGVtUHJlZml4UGF0dGVybiwgJycpLnRyaW0oKSlcbiAgICAgIC8vIC5tYXAoZ2V0VmFsdWUpXG4gICAgICAuZmlsdGVyKHZhbHVlID0+IHZhbHVlICYmIHZhbHVlLmxlbmd0aCk7XG4gIH0sXG4gIHZhcmlhYmxlOiAnUExBSU5fTElTVCcsXG4gIG5hbWU6ICdwbGFpbkxpc3RzJyxcbn07XG4iLCJjb25zdCBtYXJyaWFnZUdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7TWFycmlhZ2VcXHwoW15cXH1cXH1dKylcXH1cXH0vZztcbmNvbnN0IG1hcnJpYWdlUGF0dGVybiA9IC9NYXJyaWFnZVxcfChbXnxdKylcXHwoLiopXFx9XFx9LztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBtYXJyaWFnZUdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogbWFycmlhZ2VQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgY29uc3QgWywgd2hvLCBtYXJyaWVkXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdobyxcbiAgICAgIG1hcnJpZWQsXG4gICAgfTtcbiAgfSxcbiAgdmFyaWFibGU6ICdNQVJSSUFHRScsXG4gIG5hbWU6ICdtYXJyaWFnZXMnLFxufTtcbiIsImNvbnN0IG90aGVyR2xvYmFsUGF0dGVybiA9IC9cXHtcXHsoW158XFxuXSspXFx8KFtefFxcbl0rKVxcfD8oW15cXH1cXG5dKyk/XFx9XFx9L2c7XG5jb25zdCBvdGhlclBhdHRlcm4gPSAvXFx7XFx7KFtefFxcbl0rKVxcfChbXnxcXG5dKylcXHw/KFteXFx9XFxuXSspP1xcfVxcfS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogb3RoZXJHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IG90aGVyUGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIGxhYmVsLCBkZXNjcmlwdG9yLCBleHRyYV0gPSByZXN1bHRzO1xuICAgIHJldHVybiBsYWJlbDtcbiAgfSxcbiAgdmFyaWFibGU6ICdPVEhFUicsXG4gIG5hbWU6ICdvdGhlcnMnLFxufTtcbiIsImNvbnN0IGJpcnRoRGF0ZUdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7YmlydGhcXHNkYXRlKFteXFx9XFx9XSspXFx9XFx9L2lnO1xuY29uc3QgYmlydGhEYXRlUGF0dGVybiA9IC8oXFxkKylcXHwoXFxkKylcXHwoXFxkKykvO1xuXG5jb25zdCBtaWxsaXNJblllYXIgPSAxMDAwICogNjAgKiA2MCAqIDI0ICogMzY1O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGJpcnRoRGF0ZUdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogYmlydGhEYXRlUGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIHllYXIsIG1vbnRoLCBkYXldID0gcmVzdWx0cztcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGgtMSwgZGF5KTtcbiAgICBjb25zdCBhZ2UgPSBNYXRoLmZsb29yKChEYXRlLm5vdygpIC0gK2RhdGUpIC8gbWlsbGlzSW5ZZWFyKTtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0ZSxcbiAgICAgIGFnZSxcbiAgICB9O1xuICB9LFxuICB2YXJpYWJsZTogJ0JJUlRIX0RBVEUnLFxuICBuYW1lOiAnYmlydGhEYXRlcycsXG59O1xuIiwiY29uc3QgZGVhdGhEYXRlR2xvYmFsUGF0dGVybiA9IC9cXHtcXHtkZWF0aFxcc2RhdGVcXHNhbmRcXHNhZ2UoW15cXH1cXH1dKylcXH1cXH0vaWc7XG5jb25zdCBkZWF0aERhdGVQYXR0ZXJuID0gLyhcXGQrKVxcfChcXGQrKVxcfChcXGQrKVxcfChcXGQrKVxcfD8oXFxkKyk/XFx8PyhcXGQrKT8vO1xuXG5jb25zdCBtaWxsaXNJblllYXIgPSAxMDAwICogNjAgKiA2MCAqIDI0ICogMzY1O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGRlYXRoRGF0ZUdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogZGVhdGhEYXRlUGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIC8vIFNvbWUgYXJ0aWNsZXMgZG8gbm90IGxpc3QgYmlydGggbW9udGgvZGF5IHNvIHdlIGp1c3QgZXN0aW1hdGUgdGhlIGJpcnRoIGRhdGVcbiAgICBjb25zdCBbLCBkZWF0aFllYXIsIGRlYXRoTW9udGgsIGRlYXRoRGF5LCBiaXJ0aFllYXIsIGJpcnRoTW9udGggPSAwLCBiaXJ0aERheSA9IDBdID0gcmVzdWx0cztcbiAgICBjb25zdCBkZWF0aERhdGUgPSBuZXcgRGF0ZShkZWF0aFllYXIsIGRlYXRoTW9udGgtMSwgZGVhdGhEYXkpO1xuICAgIGNvbnN0IGJpcnRoRGF0ZSA9IG5ldyBEYXRlKGJpcnRoWWVhciwgYmlydGhNb250aC0xLCBiaXJ0aERheSk7XG4gICAgY29uc3QgYWdlID0gTWF0aC5mbG9vcigoTnVtYmVyKGRlYXRoRGF0ZSkgLSBOdW1iZXIoYmlydGhEYXRlKSkgLyBtaWxsaXNJblllYXIpO1xuICAgIHJldHVybiB7XG4gICAgICBkYXRlOiBkZWF0aERhdGUsXG4gICAgICBhZ2UsXG4gICAgfTtcbiAgfSxcbiAgdmFyaWFibGU6ICdERUFUSF9EQVRFJyxcbiAgbmFtZTogJ2RlYXRoRGF0ZXMnLFxufTtcbiIsImNvbnN0IFVSTEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7VVJMXFx8KFteXFx9XFx9XSspXFx9XFx9L2c7XG5jb25zdCBVUkxQYXR0ZXJuID0gL1VSTFxcfChbXlxcfVxcfV0rKVxcfVxcfS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogVVJMR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBVUkxQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgY29uc3QgWywgdmFsdWVdID0gcmVzdWx0cztcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIHZhcmlhYmxlOiAnVVJMJyxcbiAgbmFtZTogJ3VybHMnLFxufTtcbiIsImNvbnN0IHdlYnNpdGVHbG9iYWxQYXR0ZXJuID0gL1xcWyhodHRwcz8pOlxcL1xcLygoPzp3d3dcXC4pP1stYS16QS1aMC05QDolLl9cXCt+Iz1dezIsMjU2fVxcLlthLXpdezIsNn0pXFxiKFstYS16QS1aMC05QDolX1xcKy5+Iz8mLy89XSopXFxzKyhbXFx3XFxzXSspXFxdL2c7XG5jb25zdCB3ZWJzaXRlUGF0dGVybiA9IC9cXFsoaHR0cHM/KTpcXC9cXC8oKD86d3d3XFwuKT9bLWEtekEtWjAtOUA6JS5fXFwrfiM9XXsyLDI1Nn1cXC5bYS16XXsyLDZ9KVxcYihbLWEtekEtWjAtOUA6JV9cXCsufiM/Ji8vPV0qKVxccysoW1xcd1xcc10rKVxcXS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogd2Vic2l0ZUdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogd2Vic2l0ZVBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCBwcm90b2NvbCwgaG9zdG5hbWUsIHBhdGgsIHRpdGxlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb3RvY29sLFxuICAgICAgaG9zdG5hbWUsXG4gICAgICBwYXRoLFxuICAgICAgdGl0bGUsXG4gICAgICB1cmw6IGAke3Byb3RvY29sfTovLyR7aG9zdG5hbWV9JHtwYXRofWBcbiAgICB9O1xuICB9LFxuICB2YXJpYWJsZTogJ1dFQlNJVEUnLFxuICBuYW1lOiAnd2Vic2l0ZXMnLFxufTtcbiIsImNvbnN0IGNvbnZlcnRHbG9iYWxQYXR0ZXJuID0gL1xce1xce2NvbnZlcnRcXHwoW1xcZFxcLl0rKVxcfChcXHcrKS9nO1xuY29uc3QgY29udmVydFBhdHRlcm4gPSAvXFx7XFx7Y29udmVydFxcfChbXFxkXFwuXSspXFx8KFxcdyspLztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBjb252ZXJ0R2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBjb252ZXJ0UGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIG51bSwgdW5pdF0gPSByZXN1bHRzO1xuICAgIHJldHVybiBgJHtudW19ICR7dW5pdH1gO1xuICB9LFxuICB2YXJpYWJsZTogJ0NPTlZFUlQnLFxuICBuYW1lOiAnY29udmVydHMnLFxufTtcbiIsImltcG9ydCBzbWFsbCBmcm9tICcuL3NtYWxsJztcbmltcG9ydCBmbGFnIGZyb20gJy4vZmxhZyc7XG5pbXBvcnQgY29vcmRzIGZyb20gJy4vY29vcmRzJztcbmltcG9ydCBpbnN0YW5jZXMgZnJvbSAnLi9pbnN0YW5jZXMnO1xuaW1wb3J0IHVuYnVsbGV0ZWRMaXN0cyBmcm9tICcuL3VuYnVsbGV0ZWRMaXN0cyc7XG5pbXBvcnQgdW5tYXJrZWRMaXN0cyBmcm9tICcuL3VubWFya2VkTGlzdHMnO1xuaW1wb3J0IHBsYWluTGlzdHMgZnJvbSAnLi9wbGFpbkxpc3RzJztcbmltcG9ydCBtYXJyaWFnZXMgZnJvbSAnLi9tYXJyaWFnZXMnO1xuaW1wb3J0IG90aGVyIGZyb20gJy4vb3RoZXInO1xuaW1wb3J0IGJpcnRoRGF0ZXMgZnJvbSAnLi9iaXJ0aERhdGVzJztcbmltcG9ydCBkZWF0aERhdGVzIGZyb20gJy4vZGVhdGhEYXRlcyc7XG5pbXBvcnQgdXJsIGZyb20gJy4vdXJsJztcbmltcG9ydCB3ZWJzaXRlIGZyb20gJy4vd2Vic2l0ZSc7XG5pbXBvcnQgY29udmVydCBmcm9tICcuL2NvbnZlcnQnO1xuaW1wb3J0IGNyZWF0ZURhdGFUeXBlSGFuZGxlciBmcm9tICcuL2RhdGFUeXBlJztcblxuY29uc3QgZGF0YVR5cGVzID0gW1xuICAvLyBPcmRlciBpcyB2ZXJ5IGltcG9ydGFudCBoZXJlLi4uXG4gIGluc3RhbmNlcyxcbiAgc21hbGwsXG4gIGZsYWcsXG4gIGNvb3JkcyxcbiAgbWFycmlhZ2VzLFxuICBiaXJ0aERhdGVzLFxuICBkZWF0aERhdGVzLFxuICB1bmJ1bGxldGVkTGlzdHMsXG4gIHdlYnNpdGUsXG4gIHVybCxcbiAgY29udmVydCxcbiAgLy8gb3RoZXIgbmVlZHMgdG8gYWx3YXlzIGJlIGFmdGVyIHNwZWNpZmljIGRhdGEgZHlwZXNcbiAgb3RoZXIsXG4gIC8vIExpc3RzIHNob3VsZCBiZSBsYXN0XG4gIHBsYWluTGlzdHMsXG4gIHVubWFya2VkTGlzdHMsXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBkYXRhVHlwZXMubWFwKHR5cGUgPT4ge1xuICByZXR1cm4ge1xuICAgIGhhbmRsZXI6IGNyZWF0ZURhdGFUeXBlSGFuZGxlcih0eXBlKSxcbiAgICBuYW1lOiB0eXBlLm5hbWUsXG4gICAgcGF0dGVybjogbmV3IFJlZ0V4cChgXFxcXCQke3R5cGUudmFyaWFibGV9XyhcXFxcZCspYCksXG4gIH07XG59KTtcbiIsIlxuLyoqXG4gKiBHaXZlbiBhIHN0cmluZyBtZWFudCB0byBjb250YWluIGEgbnVtYmVyLCB0cmllcyB0byBmaW5kIG91dFxuICogdGhlIG51bWJlciBjb25zaWRlcmluZyBjb21tYSBvciBwb2ludCBzZXBhcmF0b3JzXG4gKiBAcGFyYW0gIHtTdHJpbmd9IG51bWJlclxuICogQHJldHVybiB7TnVtYmVyfSB3aXRoIHRoZSBwYXJzZWQgbnVtYmVyLCBmYWxzZSwgaWYgdGhlIHBhcnNpbmcgaXNcbiAqICAgICAgICAgICAgICAgICAgbm90IHBvc3NpYmxlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IChudW1iZXIpID0+IHtcblxuICBpZiAodHlwZW9mIG51bWJlciAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZVxuXG4gIG51bWJlciA9IG51bWJlci50cmltKCkucmVwbGFjZSgvIC9nLCAnJylcblxuICAvLyBGaW5kIG91dCBpZiBjb21tYXMgYXJlIHVzZWQgYXMgdGhvdXNhbmQgb3IgZGVjaW1hbCBzZXBhcmF0b3JzLlxuICAvLyBJZiB0aGUgc3RyaW5nIGhhcyBib3RoLCBhbmQgY29tbWFzIGFyZSBmaXJzdCwgdGhlbiBjb21tYXMgYXJlXG4gIC8vIHRob3VzYW5kIHNlcGFyYXRvcnMgKGVuZ2xpc2ggc3R5bGUpXG4gIGlmIChudW1iZXIubWF0Y2goLywvKSAmJiBudW1iZXIubWF0Y2goL1xcLi8pKSB7XG4gICAgaWYgKG51bWJlci5pbmRleE9mKCcsJykgPCBudW1iZXIuaW5kZXhPZignLicpKSB7XG4gICAgICByZXR1cm4gcGFyc2VFbmdsaXNoKG51bWJlcilcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcnNlU3BhbmlzaChudW1iZXIpXG4gICAgfVxuICB9XG5cbiAgaWYgKG51bWJlci5tYXRjaCgvLC8pICYmICFudW1iZXIubWF0Y2goL1xcLi8pKSB7XG4gICAgaWYgKG51bWJlci5tYXRjaCgvLC9nKS5sZW5ndGggPiAxKSB7XG5cbiAgICAgIC8vIElmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUsIHRoZW4gaXQncyBhIHRob3VzYW5kIHNlcGFyYXRvclxuICAgICAgcmV0dXJuIHBhcnNlRW5nbGlzaChudW1iZXIpXG4gICAgfSBlbHNlIHtcblxuICAgICAgLy8gSWYgaXQncyBmb2xsd2VkIGJ5IDMgZGlnaXRzLCBpdCdzIHByb2FibHkgYSB0aG91c2FuZCBzZXBhcmF0b3JcbiAgICAgIGlmIChudW1iZXIubWF0Y2goLyxbMC05XXszfSgkfF5bMC05XSkvKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VFbmdsaXNoKG51bWJlcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJzZVNwYW5pc2gobnVtYmVyKVxuICAgICAgfVxuXG4gICAgfVxuICB9XG5cbiAgaWYgKCFudW1iZXIubWF0Y2goLywvKSAmJiBudW1iZXIubWF0Y2goL1xcLi8pKSB7XG4gICAgaWYgKG51bWJlci5tYXRjaCgvXFwuL2cpLmxlbmd0aCA+IDEpIHtcblxuICAgICAgLy8gSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSwgdGhlbiBpdCdzIGEgdGhvdXNhbmQgc2VwYXJhdG9yXG4gICAgICByZXR1cm4gcGFyc2VTcGFuaXNoKG51bWJlcilcbiAgICB9IGVsc2Uge1xuXG4gICAgICAvLyBJZiBpdCdzIGZvbGx3ZWQgYnkgMyBkaWdpdHMsIGl0J3MgcHJvYWJseSBhIHRob3VzYW5kIHNlcGFyYXRvclxuICAgICAgaWYgKG51bWJlci5tYXRjaCgvXFwuWzAtOV17M30oJHxeWzAtOV0pLykpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlU3BhbmlzaChudW1iZXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyc2VFbmdsaXNoKG51bWJlcilcbiAgICAgIH1cblxuICAgIH1cbiAgfVxuXG4gIC8vIElmIGl0IGxvb2tzIHRoZSBzYW1lIGFzIG51bWJlciBvciBzdHJpbmcsIGp1c3QgY2FzdCBpdFxuICBpZiAoKCtudW1iZXIpLnRvU3RyaW5nKCkgPT09IG51bWJlcikgcmV0dXJuICtudW1iZXJcblxuICByZXR1cm4gZmFsc2Vcbn1cblxuY29uc3QgcGFyc2VFbmdsaXNoID0gKHN0cikgPT4ge1xuICByZXR1cm4gK3N0ci5yZXBsYWNlKC8sL2csICcnKVxufVxuXG5jb25zdCBwYXJzZVNwYW5pc2ggPSAoc3RyKSA9PiB7XG4gIHJldHVybiArc3RyLnJlcGxhY2UoL1xcLi9nLCAnJykucmVwbGFjZSgvLC9nLCAnLicpXG59XG5cbiIsImltcG9ydCBjYW1lbENhc2UgZnJvbSAnY2FtZWxjYXNlJztcbmltcG9ydCBleHRyYWN0RGF0YSBmcm9tICcuL3V0aWwvZXh0cmFjdERhdGEnO1xuaW1wb3J0IGV4dHJhY3RQcm9wZXJ0aWVzIGZyb20gJy4vdXRpbC9leHRyYWN0UHJvcGVydGllcyc7XG5pbXBvcnQgdHJhbnNmb3JtUHJvcGVydGllcyBmcm9tICcuL3V0aWwvdHJhbnNmb3JtUHJvcGVydGllcyc7XG5pbXBvcnQgZXh0cmFjdEluZm9ib3hlcyBmcm9tICcuL3V0aWwvZXh0cmFjdEluZm9ib3hlcyc7XG5pbXBvcnQgY2xlYW5Tb3VyY2UgZnJvbSAnLi91dGlsL2NsZWFuU291cmNlJztcbmltcG9ydCBwYXJzZVRhYmxlcyBmcm9tICcuL3V0aWwvcGFyc2VUYWJsZXMnO1xuaW1wb3J0IHBhcnNlTGlzdHMgZnJvbSAnLi91dGlsL3BhcnNlTGlzdHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc291cmNlLCBvcHRpb25zKSB7XG5cdGNvbnN0IGluZm9ib3hlcyA9IGV4dHJhY3RJbmZvYm94ZXMoc291cmNlKS5tYXAoaW5mb2JveCA9PiB7XG5cdCAgY29uc3QgY2xlYW5lZFNvdXJjZSA9IGNsZWFuU291cmNlKGluZm9ib3gpO1xuXHQgIGNvbnN0IGRhdGEgPSBleHRyYWN0RGF0YShjbGVhbmVkU291cmNlKTtcblx0ICBjb25zdCBwcm9wcyA9IGV4dHJhY3RQcm9wZXJ0aWVzKGRhdGEsIG9wdGlvbnMpO1xuXHQgIHJldHVybiB0cmFuc2Zvcm1Qcm9wZXJ0aWVzKHByb3BzKTsgIFx0XG4gIH0pO1xuXG4gIGlmICghaW5mb2JveGVzLmxlbmd0aCkgcmV0dXJuIHt9O1xuXG4gIGNvbnN0IHJlcyA9IHtcbiAgXHQvLyBGaXJzdCBpbmZvYm94IHNob3VsZCBiZSB0aGUgbWFpbiBvbmVcbiAgXHRnZW5lcmFsOiBpbmZvYm94ZXMuc2hpZnQoKVxuICB9O1xuXG4gIGluZm9ib3hlcy5mb3JFYWNoKG5leHQgPT4ge1xuICBcdGNvbnN0IHR5cGUgPSBuZXh0LnR5cGU7XG5cdFx0aWYgKHR5cGUpIHtcblx0XHRcdHJlc1tjYW1lbENhc2UodHlwZSldID0gbmV4dDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0T2JqZWN0LmFzc2lnbihyZXMsIHtcblx0XHRcdFx0Z2VuZXJhbDogT2JqZWN0LmFzc2lnbih7fSwgcmVzLmdlbmVyYWwsIG5leHQpXG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuXG5cdHJlcy50YWJsZXMgPSBwYXJzZVRhYmxlcyhzb3VyY2UpO1xuXHRyZXMubGlzdHMgPSBwYXJzZUxpc3RzKHNvdXJjZSk7XG5cblx0cmV0dXJuIHJlcztcbn07XG4iXSwibmFtZXMiOlsidHJpbVdyYXBwZXJzIiwic3RyIiwicmVwbGFjZSIsInRyaW0iLCJ0cmltT3IiLCJvclBvc2l0aW9uIiwiaW5kZXhPZiIsInN1YnN0cmluZyIsImdldFZhbHVlIiwicmF3Iiwia2V5IiwiY2xlYW5zZWQiLCJleHRyYVByb3BlcnR5UGF0dGVybiIsImVuZGluZ1BhdHRlcm4iLCJsaW5rcyIsIm1hdGNoIiwibGlua3NQYXR0ZXJuIiwic3BsaXQiLCJsaW5rU2VwYXJhdG9yUGF0dGVybiIsImZpbHRlciIsInRleHQiLCJkYXRhVHlwZSIsImdsb2JhbFBhdHRlcm4iLCJwYXJzZVBhdHRlcm4iLCJwYXJzZSIsInZhcmlhYmxlIiwibmFtZSIsIm1hdGNoZXMiLCJzb3VyY2UiLCJpbnN0YW5jZXMiLCJtYXAiLCJzb3VyY2VBZnRlciIsInJlZHVjZSIsIm1lbW8iLCJpbmRleCIsImJ5RGF0YUhhbmRsZXIiLCJoYW5kbGVyIiwiY29udGV4dCIsImRhdGEiLCJPYmplY3QiLCJhc3NpZ24iLCJleHRyYWN0RGF0YSIsImRhdGFUeXBlcyIsInR5cGUiLCJmaW5kUHJvcGVydHlMaXN0Iiwia2V5VmFsdWVQYWlycyIsImtleVZhbHVlR2xvYmFsUGF0dGVybiIsInJlc3VsdCIsImtleVZhbHVlUGF0dGVybiIsImV4ZWMiLCJyYXdLZXkiLCJyYXdWYWx1ZSIsImNhbWVsQ2FzZSIsIml0ZW0iLCJmaWxsVmFyaWFibGVzIiwidmFsdWUiLCJzaW1wbGlmeURhdGFWYWx1ZXMiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwiZmluZCIsInBhdHRlcm4iLCJtYXRjaGVkIiwiZGF0YVZhbHVlIiwicGFyc2VJbnQiLCJmaWxsVmFyaWFibGVzVW50aWxEb25lIiwib3B0aW9ucyIsInVuZGVmaW5lZCIsIkRhdGUiLCJBcnJheSIsImlzQXJyYXkiLCJrZXlzIiwiZmlsbGVkIiwiaGFuZGxlU21hbGxEYXRhIiwic21hbGxEYXRhVHlwZSIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJnZXRWYXJpYWJsZVZhbHVlIiwic21hbGxEYXRhIiwicmVkdWNlVmFyaWFibGUiLCJmbG9hdCIsIm51bWJlclBhcnNlIiwicGFyc2VGbG9hdCIsImlzTmFOIiwiZGF0ZVZhbHVlIiwidmFyaWFibGVWYWx1ZSIsImJ5VmFyaWFibGVSZWR1Y3Rpb24iLCJyZWR1Y2VkIiwiZXh0cmFjdFByb3BlcnRpZXMiLCJ0cmFuc2Zvcm1Qcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsInRyYW5zZm9ybWVkIiwiYmxhbmtOYW1lUGF0dGVybiIsImlkIiwiYmxhbmtOYW1lIiwiYmxhbmtJbmZvIiwiYmxhbmtJbmZvUGF0dGVybiIsImZpbmRPdXRlckluZGV4IiwibGFzdE9wZW4iLCJpIiwibGVuZ3RoIiwibmV4dFR3byIsInN1YnN0ciIsInBvcCIsInB1c2giLCJzdGFydE1hdGNoIiwiaW5mb0JveFN0YXJ0UGF0dGVybiIsInNvdXJjZUxlZnQiLCJzdGFydEluZGV4Iiwid2l0aFN0YXJ0Iiwib3V0ZXJJbmRleCIsImV4dHJhY3RJbmZvYm94ZXMiLCJwYXJzZWQiLCJpbmZvYm94ZXMiLCJjbGVhblNvdXJjZSIsInRyYW5zZm9ybVJvd1NwYW4iLCJyb3dzIiwidHJhbnNmb3JtQ2VsbHMiLCJtZXJnZWQiLCJjZWxscyIsImsiLCJvIiwiam9pbiIsImdldE1hdGNoZXMiLCJwYXJzZVRhYmxlRGF0YSIsInJvd1BhdHRlcm4iLCJlbCIsInJvd1BhdHRlcm5TaW5nbGUiLCJzbGljZSIsImdldFRhYmxlcyIsInRhYmxlU3RhcnRzIiwidGFibGVTdGFydFBhdHRlcm4iLCJ0YWJsZUVuZHMiLCJ0YWJsZUVuZFBhdHRlcm4iLCJ0YWJsZVN0YXJ0IiwidGFibGVFbmQiLCJFcnJvciIsImVuZCIsInN0YXJ0IiwibGFzdCIsImxpc3QiLCJzbWFsbEdsb2JhbFBhdHRlcm4iLCJzbWFsbFBhdHRlcm4iLCJyZXN1bHRzIiwiZmxhZ0dsb2JhbFBhdHRlcm4iLCJmbGFnUGF0dGVybiIsImNvb3Jkc0dsb2JhbFBhdHRlcm4iLCJjb29yZHNQYXR0ZXJuIiwibGlzdEl0ZW1QcmVmaXhQYXR0ZXJuIiwidW5idWxsZXRlZExpc3RHbG9iYWxQYXR0ZXJuIiwidW5idWxsZXRlZExpc3RJdGVtUGF0dGVybiIsImxpc3RJdGVtcyIsInBsYWluTGlzdEdsb2JhbFBhdHRlcm4iLCJwbGFpbkxpc3RJdGVtUGF0dGVybiIsIm1hcnJpYWdlR2xvYmFsUGF0dGVybiIsIm1hcnJpYWdlUGF0dGVybiIsIm90aGVyR2xvYmFsUGF0dGVybiIsIm90aGVyUGF0dGVybiIsImxhYmVsIiwiYmlydGhEYXRlR2xvYmFsUGF0dGVybiIsImJpcnRoRGF0ZVBhdHRlcm4iLCJtaWxsaXNJblllYXIiLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJkYXRlIiwiTWF0aCIsImZsb29yIiwibm93IiwiZGVhdGhEYXRlR2xvYmFsUGF0dGVybiIsImRlYXRoRGF0ZVBhdHRlcm4iLCJkZWF0aFllYXIiLCJkZWF0aE1vbnRoIiwiZGVhdGhEYXkiLCJiaXJ0aFllYXIiLCJiaXJ0aE1vbnRoIiwiYmlydGhEYXkiLCJkZWF0aERhdGUiLCJiaXJ0aERhdGUiLCJOdW1iZXIiLCJVUkxHbG9iYWxQYXR0ZXJuIiwiVVJMUGF0dGVybiIsIndlYnNpdGVHbG9iYWxQYXR0ZXJuIiwid2Vic2l0ZVBhdHRlcm4iLCJwcm90b2NvbCIsImhvc3RuYW1lIiwicGF0aCIsImNvbnZlcnRHbG9iYWxQYXR0ZXJuIiwiY29udmVydFBhdHRlcm4iLCJzbWFsbCIsImZsYWciLCJjb29yZHMiLCJtYXJyaWFnZXMiLCJiaXJ0aERhdGVzIiwiZGVhdGhEYXRlcyIsInVuYnVsbGV0ZWRMaXN0cyIsIndlYnNpdGUiLCJ1cmwiLCJjb252ZXJ0Iiwib3RoZXIiLCJwbGFpbkxpc3RzIiwidW5tYXJrZWRMaXN0cyIsImNyZWF0ZURhdGFUeXBlSGFuZGxlciIsIlJlZ0V4cCIsIm51bWJlciIsInBhcnNlRW5nbGlzaCIsInBhcnNlU3BhbmlzaCIsInRvU3RyaW5nIiwiaGVhZGVyc1BhdHRlcm4iLCJjZWxsU2VwYXJhdG9yUGF0dGVybiIsImxpbmtQYXR0ZXJuIiwibGlua05hbWVQYXR0ZXJuIiwiaW5saW5lSGVhZGVyUGF0dGVybiIsImFjdGlvblBhdHRlcm4iLCJ0aWNrcyIsInJvd1NwYW5Db3VudFBhdHRlcm4iLCJzdHJpcExpbmtzIiwibSIsImNhcHR1cmUiLCJyZW1vdmVBY3Rpb25zIiwidHJhbnNmb3JtQ2VsbCIsInJvdyIsImZpbmRJbmRleCIsInQiLCJwIiwiZmluZFRhYmxlU3RhcnQiLCJmaW5kVGFibGVFbmQiLCJnZXRIZWFkZXJzIiwiaGVhZGVycyIsImdldFJvd3MiLCJlIiwic3Bhbk4iLCJzcGFuQ291bnQiLCJyb3dzSW5TcGFuIiwiZ2V0TmV4dFRhYmxlIiwibGVmdCIsIm9iaiIsImNhbWVsY2FzZSIsInRhYmxlcyIsImhlYWRpbmdQYXR0ZXJuIiwic3ViaGVhZGluZ1BhdHRlcm4iLCJoZWFkaW5ncyIsInN1YmhlYWRpbmdzIiwiZm9yRWFjaCIsImhlYWRpbmdzQmVmb3JlIiwiaGVhZGluZyIsInRhYmxlIiwic3ViaGVhZGluZ3NCZWZvcmUiLCJzdWJoZWFkaW5nIiwiaW5mb2JveCIsInJlcyIsInNoaWZ0IiwibmV4dCIsImdlbmVyYWwiLCJwYXJzZVRhYmxlcyIsImxpc3RzIiwicGFyc2VMaXN0cyJdLCJtYXBwaW5ncyI6ImlHQUtBLFFBQVNBLGNBQWFDLFNBQ2JBLEdBQ0pDLFFBQVEsUUFBUyxJQUNqQkEsUUFBUSxRQUFTLElBQ2pCQSxRQUFRLFFBQVMsSUFDakJBLFFBQVEsUUFBUyxJQUNqQkMsT0FHTCxRQUFTQyxRQUFPSCxNQUNSSSxHQUFhSixFQUFJSyxRQUFRLFlBQ1gsSUFBaEJELEVBQ0tKLEVBQUlNLFVBQVUsRUFBR0YsR0FFbkJKLEVBR1QsUUFBd0JPLFVBQVNDLEVBQUtDLE9BQy9CRCxRQUNJLFNBR0hFLEdBQVdGLEVBQ2ROLE9BQ0FELFFBQVEsUUFBUyxJQUdqQkEsUUFBUSxlQUFnQixJ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
